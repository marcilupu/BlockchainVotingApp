using BlockchainVotingApp.SmartContract.Extensions;
using BlockchainVotingApp.SmartContract.Infrastructure;
using BlockchainVotingApp.SmartContract.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BlockchainApp.Test;

internal static class ZKPTest
{
    public static async Task Test()
    {
        IServiceCollection services = new ServiceCollection();

        IConfiguration configuration = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();

        services.AddSingleton(configuration);
        services.AddSmartContractService();

        var serviceProvider = services.BuildServiceProvider();

        var generator = serviceProvider.GetRequiredService<ISmartContractGenerator>();
        var smartContractServiceFactory = serviceProvider.GetService<ISmartContractServiceFactory>();

        //var userIds = new List<int>() { 1, 2, 3, 4, 5, 6 };
        var contextIdentifier = "16_BombTest";

        //var contractMetadata = await generator.CreateSmartContractContext(contextIdentifier, userIds);

        //string adminKey = "0xae9299499ac8c7280118a01cb26e1011a78fb6bf6d8bb493ad10d200d12fffb9";

        var proof = await generator.GenerateProof(contextIdentifier, 2);

        //var contractAddress = await generator.DeploySmartContract(contextIdentifier, adminKey);
        var contractAddress = "0xee2d00b0515e66bf3bbbc94a7c7ef69ed1f303e9";

        string abi = "[{\"inputs\":[],\"name\":\"IsUpcomingElection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidatesVotesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract Verifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bx0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bx1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"by0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"by1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterId\",\"type\":\"uint256\"}],\"name\":\"getUserVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"VoterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CandidateId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterId\",\"type\":\"uint256\"}],\"name\":\"checkUserHasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"electionState\",\"type\":\"bool\"}],\"name\":\"changeElectionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
        string bytecode = "0x60806040526001600660006101000a81548160ff02191690831515021790555034801561002b57600080fd5b5061104d8061003b6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80635df81330116100715780635df81330146101b357806386194c19146101e35780638778b27d146102145780639c85af6f14610232578063aa95124f14610262578063e844d09714610280576100b4565b806301fb5d6f146100b95780630bd4dec1146100e95780632b7ac3f3146101195780633477ee2e146101375780633f4cd184146101675780634140be8614610197575b600080fd5b6100d360048036038101906100ce9190610955565b61029c565b6040516100e09190610d6c565b60405180910390f35b61010360048036038101906100fe919061092c565b6104dc565b6040516101109190610ec2565b60405180910390f35b6101216104f4565b60405161012e9190610d87565b60405180910390f35b610151600480360381019061014c919061092c565b610518565b60405161015e9190610d6c565b60405180910390f35b610181600480360381019061017c919061092c565b610538565b60405161018e9190610d6c565b60405180910390f35b6101b160048036038101906101ac9190610903565b6105d5565b005b6101cd60048036038101906101c8919061092c565b6105f2565b6040516101da9190610ec2565b60405180910390f35b6101fd60048036038101906101f8919061092c565b61060a565b60405161020b929190610edd565b60405180910390f35b61021c6106cf565b6040516102299190610ec2565b60405180910390f35b61024c6004803603810190610247919061092c565b6106d5565b6040516102599190610d6c565b60405180910390f35b61026a6106f5565b6040516102779190610d6c565b60405180910390f35b61029a6004803603810190610295919061092c565b610708565b005b60006102a6610844565b6102ae610877565b6102b6610891565b6102be610877565b8d8360000181815250508c83602001818152505060405180604001604052808d81526020018c815250826000018190525060405180604001604052808b81526020018a81525082602001819052508781600001818152505086816020018181525050828460000181905250818460200181905250808460400181905250600086141561037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690610ea2565b60405180910390fd5b600660009054906101000a900460ff16156103cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c690610da2565b60405180910390fd5b600060046000888152602001908152602001600020541015610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d90610e62565b60405180910390fd5b6005600087815260200190815260200160002060009054906101000a900460ff16610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90610e42565b60405180910390fd5b6004600087815260200190815260200160002060008154809291906104aa90610f71565b9190505550600160008154809291906104c290610f71565b919050555060019450505050509998505050505050505050565b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b60008082141561057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e82565b60405180910390fd5b600060026000848152602001908152602001600020541180156105bd57506003600083815260200190815260200160002060009054906101000a900460ff165b156105cb57600190506105d0565b600090505b919050565b80600660006101000a81548160ff02191690831515021790555050565b60026020528060005260406000206000915090505481565b6000806000831415610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064890610e82565b60405180910390fd5b6003600084815260200190815260200160002060009054906101000a900460ff166106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a890610de2565b60405180910390fd5b82600260008581526020019081526020016000205491509150915091565b60015481565b60036020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900460ff1681565b600081141561074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074390610dc2565b60405180910390fd5b600660009054906101000a900460ff1661079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079290610e22565b60405180910390fd5b6005600082815260200190815260200160002060009054906101000a900460ff16156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390610e02565b60405180910390fd5b6000600460008381526020019081526020016000208190555060016005600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6040518060600160405280610857610877565b8152602001610864610891565b8152602001610871610877565b81525090565b604051806040016040528060008152602001600081525090565b60405180604001604052806108a46108b7565b81526020016108b16108b7565b81525090565b6040518060400160405280600290602082028036833780820191505090505090565b6000813590506108e881610fe9565b92915050565b6000813590506108fd81611000565b92915050565b60006020828403121561091557600080fd5b6000610923848285016108d9565b91505092915050565b60006020828403121561093e57600080fd5b600061094c848285016108ee565b91505092915050565b60008060008060008060008060006101208a8c03121561097457600080fd5b60006109828c828d016108ee565b99505060206109938c828d016108ee565b98505060406109a48c828d016108ee565b97505060606109b58c828d016108ee565b96505060806109c68c828d016108ee565b95505060a06109d78c828d016108ee565b94505060c06109e88c828d016108ee565b93505060e06109f98c828d016108ee565b925050610100610a0b8c828d016108ee565b9150509295985092959850929598565b610a2481610f17565b82525050565b610a3381610f4d565b82525050565b6000610a46603083610f06565b91507f54686520656c656374696f6e206973207374696c6c207570636f6d696e672c2060008301527f796f752063616e6e6f7420766f746521000000000000000000000000000000006020830152604082019050919050565b6000610aac601883610f06565b91507f5468652063616e646964617465206964206973206e756c6c00000000000000006000830152602082019050919050565b6000610aec602b83610f06565b91507f4b657920646f6573206e6f74206578697374732e20546865207573657220686160008301527f73206e6f7420766f7465640000000000000000000000000000000000000000006020830152604082019050919050565b6000610b52602483610f06565b91507f5468652063616e6469646174652068617320616c7265616479206265656e206160008301527f64646564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610bb8603683610f06565b91507f54686520656c656374696f6e2073686f756c64206265207570636f6d696e672060008301527f696e206f7264657220746f206265206368616e676564000000000000000000006020830152604082019050919050565b6000610c1e603783610f06565b91507f5468652063616e6469646174652068617320746f20626520696e20746865206560008301527f6c656374696f6e2063616e64696461746573206c6973740000000000000000006020830152604082019050919050565b6000610c84603883610f06565b91507f5468652063616e6469646174652068617320746f20626520696e20746865206360008301527f616e64696461746573566f746573436f756e74206c69737400000000000000006020830152604082019050919050565b6000610cea601383610f06565b91507f54686520766f7465724964206973206e756c6c000000000000000000000000006000830152602082019050919050565b6000610d2a601783610f06565b91507f5468652063616e6469646174654964206973206e756c6c0000000000000000006000830152602082019050919050565b610d6681610f43565b82525050565b6000602082019050610d816000830184610a1b565b92915050565b6000602082019050610d9c6000830184610a2a565b92915050565b60006020820190508181036000830152610dbb81610a39565b9050919050565b60006020820190508181036000830152610ddb81610a9f565b9050919050565b60006020820190508181036000830152610dfb81610adf565b9050919050565b60006020820190508181036000830152610e1b81610b45565b9050919050565b60006020820190508181036000830152610e3b81610bab565b9050919050565b60006020820190508181036000830152610e5b81610c11565b9050919050565b60006020820190508181036000830152610e7b81610c77565b9050919050565b60006020820190508181036000830152610e9b81610cdd565b9050919050565b60006020820190508181036000830152610ebb81610d1d565b9050919050565b6000602082019050610ed76000830184610d5d565b92915050565b6000604082019050610ef26000830185610d5d565b610eff6020830184610d5d565b9392505050565b600082825260208201905092915050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f5882610f5f565b9050919050565b6000610f6a82610f23565b9050919050565b6000610f7c82610f43565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610faf57610fae610fba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610ff281610f17565b8114610ffd57600080fd5b50565b61100981610f43565b811461101457600080fd5b5056fea2646970667358221220d18c740fc380603fe95375ba893302e873c8a47667087e965cea4aee2075626064736f6c63430008000033";
        ContractMetadata contractMetadata = new ContractMetadata(bytecode, abi);

        var smartContractService = smartContractServiceFactory.Create(contractMetadata);

        var result = await smartContractService.Vote(proof, 12, contractAddress);

        Console.WriteLine("Done");
    }
}
